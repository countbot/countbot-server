type Group {
  id: String!
  name: String!
  description: String
  msgCount: Int @cypher( statement: "MATCH (this)<-[:POSTED_IN]-(m:Message) RETURN count(m)" )
  imageUrl: String
  members: [User] @relation(name: "MEMBER_OF", direction: "IN")
  posts: [Message] @relation(name: "POSTED_IN", direction: "IN")
}

type User {
  id: String!
  name: String
  groups: [Group] @relation(name: "MEMBER_OF", direction: "OUT")
  posts: [Message] @relation(name: "POSTED", direction: "OUT")
  liked: [Message] @relation(name: "LIKED", direction: "OUT")
  count: Int @cypher( statement: "MATCH (this)-[:POSTED]->(m:Message) RETURN count(m)" )
  games: [PLAYED_IN]
}
  
type Message {
  id: String!
  posted_by: User! @relation(name: "POSTED", direction: "IN")
  group: Group! @relation(name: "POSTED_IN", direction: "OUT")
  text: String
  timestamp: DateTime
  liked_by: [User] @relation(name: "LIKED", direction: "IN")
  role: [String] @cypher( statement: "MATCH (u:User)-[:POSTED]->(this)-[:PART_OF]->(g:Game) MATCH (u)-[p:PLAYED_IN]->(g) RETURN p.role" )
  game: Game @relation(name: "PART_OF", direction: "OUT")
}

type Game {
  id: String!
  theme: String
  winner: String
  startTime: DateTime
  endTime: DateTime
  players: [PLAYED_IN]
  posts: [Message] @relation(name: "PART_OF", direction: "IN")
}

type PLAYED_IN @relation(name: "PLAYED_IN") {
  from: User
  to: Game
  role: [String]
}

type Query {
  Group(id: String, name: String): [Group]
  User(id: String, name: String): [User]
  Message(id: String): [Message]
  Game(id: String, theme: String): [Game]
}
